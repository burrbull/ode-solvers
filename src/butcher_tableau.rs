#![allow(clippy::excessive_precision, clippy::unreadable_literal)]

//! Butcher tableaux containing the coefficients of the Runge-Kutta methods.

/// Structure containing the coefficients for the Dormand-Prince method of order 5(4) with dense output of order 4.
pub struct Dopri54 {
    num_stages: usize,
    pub order: i32,
    a: Box<[Box<[f64]>]>,
    c: Box<[f64]>,
    d: Box<[f64]>,
    e: Box<[f64]>,
}

impl Dopri54 {
    /// Initialize the structure with the coefficients of the method.
    pub fn new() -> Dopri54 {
        Dopri54 {
            num_stages: 7,
            order: 5,
            a: Box::new([
                Box::new([1. / 5.]),
                Box::new([3. / 40., 9. / 40.]),
                Box::new([44. / 45., -56. / 15., 32. / 9.]),
                Box::new([
                    19372. / 6561.,
                    -25360. / 2187.,
                    64448. / 6561.,
                    -212. / 729.,
                ]),
                Box::new([
                    9017. / 3168.,
                    -355. / 33.,
                    46732. / 5247.,
                    49. / 176.,
                    -5103. / 18656.,
                ]),
                Box::new([
                    35. / 384.,
                    0.,
                    500. / 1113.,
                    125. / 192.,
                    -2187. / 6784.,
                    11. / 84.,
                ]),
            ]),
            c: Box::new([0., 1. / 5., 3. / 10., 4. / 5., 8. / 9., 1., 1.]),
            d: Box::new([
                -12715105075. / 11282082432.,
                0.,
                87487479700. / 32700410799.,
                -10690763975. / 1880347072.,
                701980252875. / 199316789632.,
                -1453857185. / 822651844.,
                69997945. / 29380423.,
            ]),
            e: Box::new([
                71. / 57600.,
                0.,
                -71. / 16695.,
                71. / 1920.,
                -686. / 13487.,
                22. / 525.,
                -1. / 40.,
            ]),
        }
    }

    /// Returns the _a<sub>ij</sub>_ coefficient of the Runge-Kutta matrix.
    pub fn a(&self, i: usize, j: usize) -> f64 {
        self.a[i - 2][j - 1]
    }

    /// Returns the _c<sub>i</sub>_ coefficient.
    pub fn c(&self, i: usize) -> f64 {
        self.c[i - 1]
    }

    /// Returns the _d<sub>i</sub>_ coefficient.
    pub fn d(&self, i: usize) -> f64 {
        self.d[i - 1]
    }

    /// Returns the _e<sub>i</sub>_ coefficient.
    pub fn e(&self, i: usize) -> f64 {
        self.e[i - 1]
    }

    /// Returns the number of stages of the Butcher tableau.
    pub fn num_stages(&self) -> usize {
        self.num_stages
    }

    /// Returns the order of the Butcher tableau.
    pub fn order(&self) -> i32 {
        self.order
    }
}

/// Structure containing the coefficients for the Dormand-Prince method of order 8(5,3) with dense output of order 7.
pub struct Dopri853 {
    num_stages: usize,
    pub order: i32,
    a: Box<[Box<[f64]>]>,
    b: Box<[f64]>,
    bhh: Box<[f64]>,
    c: Box<[f64]>,
    d: Box<[Box<[f64]>]>,
    e: Box<[f64]>,
}

impl Dopri853 {
    /// Initialize the structure with the coefficients of the method.
    pub fn new() -> Dopri853 {
        Dopri853 {
            num_stages: 16,
            order: 7,
            a: Box::new([
                Box::new([5.26001519587677318785587544488_e-2]),
                Box::new([
                    1.97250569845378994544595329183_e-2,
                    5.91751709536136983633785987549_e-2,
                ]),
                Box::new([
                    2.95875854768068491816892993775_e-2,
                    0.,
                    8.87627564304205475450678981324_e-2,
                ]),
                Box::new([
                    2.41365134159266685502369798665_e-1,
                    0.,
                    -8.84549479328286085344864962717_e-1,
                    9.24834003261792003115737966543_e-1,
                ]),
                Box::new([
                    3.7037037037037037037037037037_e-2,
                    0.,
                    0.,
                    1.70828608729473871279604482173_e-1,
                    1.25467687566822425016691814123_e-1,
                ]),
                Box::new([
                    3.7109375_e-2,
                    0.,
                    0.,
                    1.70252211019544039314978060272_e-1,
                    6.02165389804559606850219397283_e-2,
                    -1.7578125_e-2,
                ]),
                Box::new([
                    3.70920001185047927108779319836_e-2,
                    0.,
                    0.,
                    1.70383925712239993810214054705_e-1,
                    1.07262030446373284651809199168_e-1,
                    -1.53194377486244017527936158236_e-2,
                    8.27378916381402288758473766002_e-3,
                ]),
                Box::new([
                    6.24110958716075717114429577812_e-1,
                    0.,
                    0.,
                    -3.36089262944694129406857109825,
                    -8.68219346841726006818189891453_e-1,
                    2.75920996994467083049415600797_e1,
                    2.01540675504778934086186788979_e1,
                    -4.34898841810699588477366255144_e1,
                ]),
                Box::new([
                    4.77662536438264365890433908527_e-1,
                    0.,
                    0.,
                    -2.48811461997166764192642586468,
                    -5.90290826836842996371446475743_e-1,
                    2.12300514481811942347288949897_e1,
                    1.52792336328824235832596922938_e1,
                    -3.32882109689848629194453265587_e1,
                    -2.03312017085086261358222928593_e-2,
                ]),
                Box::new([
                    -9.3714243008598732571704021658E-1,
                    0.,
                    0.,
                    5.18637242884406370830023853209,
                    1.09143734899672957818500254654,
                    -8.14978701074692612513997267357,
                    -1.85200656599969598641566180701_e1,
                    2.27394870993505042818970056734_e1,
                    2.49360555267965238987089396762,
                    -3.0467644718982195003823669022,
                ]),
                Box::new([
                    2.27331014751653820792359768449,
                    0.,
                    0.,
                    -1.05344954667372501984066689879_e1,
                    -2.00087205822486249909675718444,
                    -1.79589318631187989172765950534_e1,
                    2.79488845294199600508499808837_e1,
                    -2.85899827713502369474065508674,
                    -8.87285693353062954433549289258,
                    1.23605671757943030647266201528_e1,
                    6.43392746015763530355970484046_e-1,
                ]),
                Box::new([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
                Box::new([
                    5.61675022830479523392909219681_e-2,
                    0.,
                    0.,
                    0.,
                    0.,
                    0.,
                    2.53500210216624811088794765333_e-1,
                    -2.46239037470802489917441475441_e-1,
                    -1.24191423263816360469010140626_e-1,
                    1.5329179827876569731206322685_e-1,
                    8.20105229563468988491666602057_e-3,
                    7.56789766054569976138603589584_e-3,
                    -8.298_e-3,
                ]),
                Box::new([
                    3.18346481635021405060768473261_e-2,
                    0.,
                    0.,
                    0.,
                    0.,
                    2.83009096723667755288322961402_e-2,
                    5.35419883074385676223797384372_e-2,
                    -5.49237485713909884646569340306_e-2,
                    0.,
                    0.,
                    -1.08347328697249322858509316994_e-4,
                    3.82571090835658412954920192323_e-4,
                    -3.40465008687404560802977114492_e-4,
                    1.41312443674632500278074618366_e-1,
                ]),
                Box::new([
                    -4.28896301583791923408573538692_e-1,
                    0.,
                    0.,
                    0.,
                    0.,
                    -4.69762141536116384314449447206,
                    7.68342119606259904184240953878,
                    4.06898981839711007970213554331,
                    3.56727187455281109270669543021_e-1,
                    0.,
                    0.,
                    0.,
                    -1.39902416515901462129418009734_e-3,
                    2.9475147891527723389556272149,
                    -9.15095847217987001081870187138,
                ]),
            ]),
            b: Box::new([
                5.42937341165687622380535766363_e-2,
                0.,
                0.,
                0.,
                0.,
                4.45031289275240888144113950566,
                1.89151789931450038304281599044,
                -5.8012039600105847814672114227,
                3.1116436695781989440891606237_e-1,
                -1.52160949662516078556178806805_e-1,
                2.01365400804030348374776537501_e-1,
                4.47106157277725905176885569043_e-2,
            ]),
            bhh: Box::new([
                0.244094488188976377952755905512,
                0.733846688281611857341361741547,
                0.220588235294117647058823529412_e-01,
            ]),
            c: Box::new([
                0.,
                0.526001519587677318785587544488_e-01,
                0.789002279381515978178381316732_e-01,
                0.118350341907227396726757197510,
                0.281649658092772603273242802490,
                0.333333333333333333333333333333,
                0.25,
                0.307692307692307692307692307692,
                0.651282051282051282051282051282,
                0.6,
                0.857142857142857142857142857142,
                0.,
                0.,
                0.1,
                0.2,
                0.777777777777777777777777777778,
            ]),
            d: Box::new([
                Box::new([
                    -0.84289382761090128651353491142_e+01,
                    0.,
                    0.,
                    0.,
                    0.,
                    0.56671495351937776962531783590,
                    -0.30689499459498916912797304727_e+01,
                    0.23846676565120698287728149680_e+01,
                    0.21170345824450282767155149946_e+01,
                    -0.87139158377797299206789907490,
                    0.22404374302607882758541771650_e+01,
                    0.63157877876946881815570249290_e+00,
                    -0.88990336451333310820698117400_e-01,
                    0.18148505520854727256656404962_e+02,
                    -0.91946323924783554000451984436_e+01,
                    -0.44360363875948939664310572000_e+01,
                ]),
                Box::new([
                    0.10427508642579134603413151009_e+02,
                    0.,
                    0.,
                    0.,
                    0.,
                    0.24228349177525818288430175319_e+03,
                    0.16520045171727028198505394887_e+03,
                    -0.37454675472269020279518312152_e+03,
                    -0.22113666853125306036270938578_e+02,
                    0.77334326684722638389603898808_e+01,
                    -0.30674084731089398182061213626_e+02,
                    -0.93321305264302278729567221706_e+01,
                    0.15697238121770843886131091075_e+02,
                    -0.31139403219565177677282850411_e+02,
                    -0.93529243588444783865713862664_e+01,
                    0.35816841486394083752465898540_e+02,
                ]),
                Box::new([
                    0.19985053242002433820987653617_e+02,
                    0.,
                    0.,
                    0.,
                    0.,
                    -0.38703730874935176555105901742_e+03,
                    -0.18917813819516756882830838328_e+03,
                    0.52780815920542364900561016686_e+03,
                    -0.11573902539959630126141871134_e+02,
                    0.68812326946963000169666922661_e+01,
                    -0.10006050966910838403183860980_e+01,
                    0.77771377980534432092869265740,
                    -0.27782057523535084065932004339_e+01,
                    -0.60196695231264120758267380846_e+02,
                    0.84320405506677161018159903784_e+02,
                    0.11992291136182789328035130030_e+02,
                ]),
                Box::new([
                    -0.25693933462703749003312586129_e+02,
                    0.,
                    0.,
                    0.,
                    0.,
                    -0.15418974869023643374053993627_e+03,
                    -0.23152937917604549567536039109_e+03,
                    0.35763911791061412378285349910_e+03,
                    0.93405324183624310003907691704_e+02,
                    -0.37458323136451633156875139351_e+02,
                    0.10409964950896230045147246184_e+03,
                    0.29840293426660503123344363579_e+02,
                    -0.43533456590011143754432175058_e+02,
                    0.96324553959188282948394950600_e+02,
                    -0.39177261675615439165231486172_e+02,
                    -0.14972683625798562581422125276_e+03,
                ]),
            ]),
            e: Box::new([
                0.1312004499419488073250102996_e-01,
                0.,
                0.,
                0.,
                0.,
                -0.1225156446376204440720569753_e+01,
                -0.4957589496572501915214079952,
                0.1664377182454986536961530415_e+01,
                -0.3503288487499736816886487290,
                0.3341791187130174790297318841,
                0.8192320648511571246570742613_e-01,
                -0.2235530786388629525884427845_e-01,
                0.,
                0.,
                0.,
                0.,
            ]),
        }
    }

    /// Returns the _a<sub>ij</sub>_ coefficient.
    pub fn a(&self, i: usize, j: usize) -> f64 {
        self.a[i - 2][j - 1]
    }

    /// Returns the _b<sub>i</sub>_ coefficient.
    pub fn b(&self, i: usize) -> f64 {
        self.b[i - 1]
    }

    /// Returns the _bhh<sub>i</sub>_ coefficient.
    pub fn bhh(&self, i: usize) -> f64 {
        self.bhh[i - 1]
    }

    /// Returns the _c<sub>i</sub>_ coefficient.
    pub fn c(&self, i: usize) -> f64 {
        self.c[i - 1]
    }

    /// Returns the _d<sub>i</sub>_ coefficient.
    pub fn d(&self, i: usize, j: usize) -> f64 {
        self.d[i - 4][j - 1]
    }

    /// Retunrns the _e<sub>i</sub>_ coefficient.
    pub fn e(&self, i: usize) -> f64 {
        self.e[i - 1]
    }

    /// Returns the number of stages of the Butcher tableau.
    pub fn num_stages(&self) -> usize {
        self.num_stages
    }

    /// Returns the order of the Butcher tableau.
    pub fn order(&self) -> i32 {
        self.order
    }
}

#[cfg(test)]
mod tests {
    use butcher_tableau;
    // use test::Bencher;
    // use butcher_tableau;
    // #[bench]
    // fn bench_dopri5(b: &mut Bencher) {
    //     b.iter(|| butcher_tableau::ButcherTableau::DOPRI5());
    // }

    #[test]
    fn dopri5_e() {
        let tab = butcher_tableau::Dopri54::new();
        assert_eq!(tab.e(1), 71. / 57600.);
        assert_eq!(tab.e(7), -1. / 40.);
    }

    #[test]
    fn dopri853_a() {
        let tab = butcher_tableau::Dopri853::new();
        assert_eq!(tab.a(2, 1), 5.26001519587677318785587544488_e-2);
        assert_eq!(tab.a(7, 4), 1.70252211019544039314978060272_e-1);
        assert_eq!(tab.a(12, 9), -8.87285693353062954433549289258);
        assert_eq!(tab.a(15, 3), 0.);
        assert_eq!(tab.a(4, 3), 8.87627564304205475450678981324_e-2);
    }
}
